@rendermode InteractiveServer
@using BlazorPopUpOnLoadPoC.Misc
@using System.Timers

<style>

	.loading-container {
		z-index: 5000;
		width: 100vw;
		height: 100vh;
	}

	.loading-overlay {
		position: fixed;
		top: 0;
		left: 0;
		background: rgba(0,0,0,0.8);
		z-index: 4000;
		width: 100%;
		height: 100%;
	}

	.icon-container {
		text-align: center;
		margin-top: 200px;
	}

	.text-container {
		color: white;
		text-align: center;
		font-size: 2em;
		font-weight: 100;
		margin-top: 200px;
	}

	.icon {
		max-width: 120px;
	}

	.hidden {
		display: none;
	}

</style>


@inject SpinnerService _spinnerService

@if (IsVisible)
{

	<div class="loading-overlay @hiddenClass">
		<div class="loading-container">
			@if (Type == SpinnerType.Icon)
			{
				<div class="icon-container">
					<p>name: @RendererInfo.Name</p>
					@if (!string.IsNullOrEmpty(Icon))
					{
						<object type="image/svg+xml" class="icon" data="@Icon">SVG not supported</object>
					}
					else if (string.IsNullOrEmpty(Icon))
					{
						<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="icon" style="margin: auto; background: transparent; display: block; shape-rendering: auto;" width="153px" height="153px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
							<circle cx="50" cy="50" fill="none" stroke="white" stroke-width="10" r="36" stroke-dasharray="169.64600329384882 58.548667764616276">
								<animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="3.2258064516129035s" values="0 50 50;360 50 50" keyTimes="0;1"></animateTransform>
							</circle>
							<!-- [ldio] generated by https://loading.io/ -->
						</svg>
					}
				</div>
			}
			else if (Type == SpinnerType.Text)
			{
				<div class="text-container">@Text</div>
			}
		</div>
	</div>
}


@code
{

	[Parameter]
	public SpinnerType Type { get; set; } = SpinnerType.Icon;

	[Parameter]
	public string Icon { get; set; }

	[Parameter]
	public string Text { get; set; } = "Loading...";

	protected bool IsVisible { get; set; }

	private string hiddenClass = "hidden";

	protected override void OnInitialized()
	{
		_spinnerService.OnShow += ShowLoadingSpinner;
		_spinnerService.OnHide += HideLoadingSpinner;
	}

	public void ShowLoadingSpinner()
	{
		IsVisible = true;
		hiddenClass = string.Empty;

		var timer = new Timer();
		timer.Interval = 1;
		timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
		{
			timer.Enabled = false;
			await InvokeAsync(StateHasChanged);
		};
		timer.Enabled = true;

	}

	async public void HideLoadingSpinner()
	{
		IsVisible = false;
		hiddenClass = "hidden";
		var timer = new Timer();
		timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
				{
					timer.Enabled = false;
					await InvokeAsync(StateHasChanged);
				};
		timer.Enabled = true;
	}
}