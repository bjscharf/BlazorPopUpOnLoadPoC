@rendermode InteractiveServer
@using System.Timers
@using BlazorPopUpOnLoadPoC.Misc
@inject SpinnerService _spinnerService
@implements IDisposable;

<div class="toast-container p-3 sto-toast @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show sto-toast-content" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            @if (IsSticky)
            {
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            }
        </div>

        <div class="toast-body @toastTypeClass">
            @BodyText
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    private System.Timers.Timer timer = new Timer();

    private string toastTypeClass = "toast-success";

    private bool IsSticky = false;

    private string showClass => IsVisible ? "d-block" : "d-none";

    protected override void OnInitialized()
    {
        _spinnerService.OnToastShow += Show;
        _spinnerService.OnToastHide += Close;
    }

    public void Show()
    {

        if (IsVisible)
            return; 

        var toastData = _spinnerService.GetToastData();
        HeaderText = toastData.Title;
        BodyText = toastData.Message;
        IsVisible = true;
        IsSticky = toastData.IsSticky;
        toastTypeClass = toastData.Type switch
        {
            ToastType.Success => "toast-success",
            ToastType.Danger => "toast-error",
            ToastType.Info => "toast-info",
            _ => string.Empty
        };
        StateHasChanged();

        if (!toastData.IsSticky)
        {
            timer = new();
            timer.Interval = 2000;
            timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
            {
                Close();
                timer.Enabled = false;
                await InvokeAsync(StateHasChanged);
            };
            timer.Enabled = true;
        }
    }

    public void Dispose()
    {
        _spinnerService.OnToastShow -= Show;
        _spinnerService.OnToastHide -= Close;
    }

    public void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        //StateHasChanged();
    }
}